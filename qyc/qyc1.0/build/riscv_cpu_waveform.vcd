$date
	Thu Mar 20 00:09:09 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module cpu_tb $end
$var wire 32 ! dmem_write_data [31:0] $end
$var wire 1 " dmem_write $end
$var wire 1 # dmem_ready $end
$var wire 32 $ dmem_read_data [31:0] $end
$var wire 1 % dmem_read $end
$var wire 3 & dmem_funct3 [2:0] $end
$var wire 32 ' dmem_addr [31:0] $end
$var reg 1 ( clk $end
$var reg 1 ) rst_n $end
$scope module cpu $end
$var wire 1 ( clk $end
$var wire 32 * dmem_addr [31:0] $end
$var wire 3 + dmem_funct3 [2:0] $end
$var wire 1 % dmem_read $end
$var wire 1 " dmem_write $end
$var wire 32 , dmem_write_data [31:0] $end
$var wire 32 - read_data_mem [31:0] $end
$var wire 1 ) rst_n $end
$var wire 1 . zero_flag_ex $end
$var wire 32 / write_back_data [31:0] $end
$var wire 1 0 stall_if $end
$var wire 1 1 stall_id $end
$var wire 32 2 rs2_data_id [31:0] $end
$var wire 5 3 rs2_addr_id [4:0] $end
$var wire 32 4 rs1_data_id [31:0] $end
$var wire 5 5 rs1_addr_id [4:0] $end
$var wire 1 6 reg_write_id $end
$var wire 5 7 rd_addr_id [4:0] $end
$var wire 32 8 pc_id [31:0] $end
$var wire 32 9 pc_ex [31:0] $end
$var wire 1 : mem_write_id $end
$var wire 1 ; mem_to_reg_id $end
$var wire 1 < mem_read_id $end
$var wire 1 = is_jump_id $end
$var wire 1 > is_branch_id $end
$var wire 32 ? instruction_id [31:0] $end
$var wire 32 @ imm_data_id [31:0] $end
$var wire 1 A funct7_bit30_id $end
$var wire 3 B funct3_id [2:0] $end
$var wire 2 C forward_b [1:0] $end
$var wire 2 D forward_a [1:0] $end
$var wire 1 E flush_ex $end
$var wire 32 F dmem_read_data [31:0] $end
$var wire 32 G branch_target [31:0] $end
$var wire 1 H branch_taken $end
$var wire 1 I alu_src_id $end
$var wire 32 J alu_result_ex [31:0] $end
$var wire 2 K alu_op_id [1:0] $end
$var wire 32 L alu_input_b [31:0] $end
$var wire 32 M alu_input_a [31:0] $end
$var wire 4 N alu_control [3:0] $end
$var reg 2 O alu_op_ex [1:0] $end
$var reg 32 P alu_result_mem [31:0] $end
$var reg 32 Q alu_result_wb [31:0] $end
$var reg 1 R alu_src_ex $end
$var reg 3 S funct3_ex [2:0] $end
$var reg 3 T funct3_mem [2:0] $end
$var reg 1 U funct7_bit30_ex $end
$var reg 32 V imm_data_ex [31:0] $end
$var reg 1 W is_branch_ex $end
$var reg 1 X is_jump_ex $end
$var reg 1 Y mem_busy $end
$var reg 1 Z mem_read_ex $end
$var reg 1 [ mem_read_mem $end
$var reg 1 \ mem_to_reg_ex $end
$var reg 1 ] mem_to_reg_mem $end
$var reg 1 ^ mem_to_reg_wb $end
$var reg 1 _ mem_write_ex $end
$var reg 1 ` mem_write_mem $end
$var reg 5 a rd_addr_ex [4:0] $end
$var reg 5 b rd_addr_mem [4:0] $end
$var reg 5 c rd_addr_wb [4:0] $end
$var reg 32 d read_data_wb [31:0] $end
$var reg 1 e reg_write_ex $end
$var reg 1 f reg_write_mem $end
$var reg 1 g reg_write_wb $end
$var reg 5 h rs1_addr_ex [4:0] $end
$var reg 32 i rs1_data_ex [31:0] $end
$var reg 5 j rs2_addr_ex [4:0] $end
$var reg 32 k rs2_data_ex [31:0] $end
$var reg 32 l write_data_mem [31:0] $end
$scope module alu_ctrl $end
$var wire 2 m alu_op_in [1:0] $end
$var wire 3 n funct3 [2:0] $end
$var wire 1 U funct7_bit30 $end
$var reg 4 o alu_op_out [3:0] $end
$upscope $end
$scope module alu_mux $end
$var wire 1 R alu_src $end
$var wire 32 p imm_ex [31:0] $end
$var wire 32 q mem_result [31:0] $end
$var wire 32 r reg_data_a [31:0] $end
$var wire 32 s reg_data_b [31:0] $end
$var wire 32 t wb_result [31:0] $end
$var wire 2 u forward_b [1:0] $end
$var wire 2 v forward_a [1:0] $end
$var wire 32 w alu_input_b [31:0] $end
$var reg 32 x alu_input_a [31:0] $end
$var reg 32 y forward_b_result [31:0] $end
$upscope $end
$scope module alu_unit $end
$var wire 32 z a [31:0] $end
$var wire 4 { alu_op [3:0] $end
$var wire 32 | b [31:0] $end
$var wire 32 } result [31:0] $end
$var wire 1 . zero $end
$var parameter 4 ~ ALU_ADD $end
$var parameter 4 !" ALU_AND $end
$var parameter 4 "" ALU_OR $end
$var parameter 4 #" ALU_SLL $end
$var parameter 4 $" ALU_SLT $end
$var parameter 4 %" ALU_SLTU $end
$var parameter 4 &" ALU_SRA $end
$var parameter 4 '" ALU_SRL $end
$var parameter 4 (" ALU_SUB $end
$var parameter 4 )" ALU_XOR $end
$var reg 32 *" tmp_result [31:0] $end
$upscope $end
$scope module branch_unit $end
$var wire 32 +" alu_result_ex [31:0] $end
$var wire 1 H branch_taken $end
$var wire 1 ( clk $end
$var wire 3 ," funct3_ex [2:0] $end
$var wire 32 -" imm_ex [31:0] $end
$var wire 1 W is_branch_ex $end
$var wire 1 X is_jump_ex $end
$var wire 32 ." rs1_data_ex [31:0] $end
$var wire 32 /" rs2_data_ex [31:0] $end
$var wire 1 ) rst_n $end
$var wire 32 0" pc_ex [31:0] $end
$var reg 1 1" branch_condition_met $end
$var reg 32 2" branch_target [31:0] $end
$upscope $end
$scope module decode_stage $end
$var wire 1 ( clk $end
$var wire 32 3" pc_id_out [31:0] $end
$var wire 1 ) rst_n $end
$var wire 1 1 stall $end
$var wire 5 4" rs2_addr [4:0] $end
$var wire 5 5" rs1_addr [4:0] $end
$var wire 5 6" rd_addr [4:0] $end
$var wire 32 7" pc_id [31:0] $end
$var wire 7 8" opcode [6:0] $end
$var wire 32 9" instruction_id [31:0] $end
$var wire 1 A funct7_bit30 $end
$var wire 7 :" funct7 [6:0] $end
$var wire 3 ;" funct3 [2:0] $end
$var reg 2 <" alu_op [1:0] $end
$var reg 1 I alu_src $end
$var reg 32 =" imm_data [31:0] $end
$var reg 1 > is_branch_id $end
$var reg 1 = is_jump_id $end
$var reg 1 < mem_read $end
$var reg 1 ; mem_to_reg $end
$var reg 1 : mem_write $end
$var reg 1 6 reg_write $end
$upscope $end
$scope module fetch_stage $end
$var wire 1 H branch_taken $end
$var wire 32 >" branch_target [31:0] $end
$var wire 1 ( clk $end
$var wire 1 ) rst_n $end
$var wire 1 0 stall $end
$var wire 32 ?" pc_next [31:0] $end
$var wire 32 @" pc_current [31:0] $end
$var wire 32 A" imem_data [31:0] $end
$var wire 1 B" imem_addr $end
$var reg 32 C" instruction_id [31:0] $end
$var reg 32 D" pc_id [31:0] $end
$scope module instr_mem $end
$var wire 1 ( clk $end
$var wire 1 ) rst_n $end
$var wire 32 E" instruction [31:0] $end
$var wire 32 F" addr [31:0] $end
$var parameter 32 G" ADDR_WIDTH $end
$var parameter 32 H" MEM_SIZE $end
$upscope $end
$scope module pc_unit $end
$var wire 1 H branch_taken $end
$var wire 32 I" branch_target [31:0] $end
$var wire 1 ( clk $end
$var wire 1 ) rst_n $end
$var wire 1 0 stall $end
$var wire 32 J" pc_next [31:0] $end
$var reg 32 K" pc_current [31:0] $end
$upscope $end
$upscope $end
$scope module forwarding $end
$var wire 5 L" rd_addr_mem [4:0] $end
$var wire 5 M" rd_addr_wb [4:0] $end
$var wire 1 f reg_write_mem $end
$var wire 1 g reg_write_wb $end
$var wire 5 N" rs1_addr_ex [4:0] $end
$var wire 1 O" rs1_read $end
$var wire 5 P" rs2_addr_ex [4:0] $end
$var wire 1 Q" rs2_read $end
$var reg 2 R" forward_a [1:0] $end
$var reg 2 S" forward_b [1:0] $end
$upscope $end
$scope module hazard_unit $end
$var wire 1 H branch_taken $end
$var wire 1 Y mem_busy $end
$var wire 1 Z mem_read_ex $end
$var wire 5 T" rd_addr_ex [4:0] $end
$var wire 5 U" rs1_addr_id [4:0] $end
$var wire 5 V" rs2_addr_id [4:0] $end
$var reg 1 E flush_ex $end
$var reg 1 1 stall_id $end
$var reg 1 0 stall_if $end
$upscope $end
$scope module reg_file $end
$var wire 1 ( clk $end
$var wire 5 W" rd_addr [4:0] $end
$var wire 1 g reg_write $end
$var wire 5 X" rs1_addr [4:0] $end
$var wire 5 Y" rs2_addr [4:0] $end
$var wire 1 ) rst_n $end
$var wire 32 Z" write_data [31:0] $end
$var wire 32 [" rs2_data [31:0] $end
$var wire 32 \" rs1_data [31:0] $end
$var integer 32 ]" i [31:0] $end
$upscope $end
$upscope $end
$scope module dmem $end
$var wire 32 ^" addr [31:0] $end
$var wire 1 ( clk $end
$var wire 3 _" funct3 [2:0] $end
$var wire 1 % mem_read $end
$var wire 1 " mem_write $end
$var wire 1 ) rst_n $end
$var wire 32 `" write_data [31:0] $end
$var wire 32 a" aligned_addr [31:0] $end
$var parameter 32 b" ADDR_WIDTH $end
$var parameter 3 c" BYTE $end
$var parameter 3 d" BYTE_U $end
$var parameter 3 e" HALF $end
$var parameter 3 f" HALF_U $end
$var parameter 32 g" MEM_SIZE $end
$var parameter 3 h" WORD $end
$var reg 1 # mem_ready $end
$var reg 32 i" read_data [31:0] $end
$scope begin $ivl_for_loop0 $end
$var integer 32 j" i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b10 h"
b1000000000000 g"
b101 f"
b1 e"
b100 d"
b0 c"
b1100 b"
b1000000000000 H"
b1100 G"
b101 )"
b1 ("
b110 '"
b111 &"
b100 %"
b11 $"
b10 #"
b1000 ""
b1001 !"
b0 ~
$end
#0
$dumpvars
b1000000000000 j"
bx i"
b0 a"
b0 `"
b0 _"
b0 ^"
b100000 ]"
b0 \"
b0 ["
b0 Z"
b0 Y"
b0 X"
b0 W"
b0 V"
b0 U"
b0 T"
b0 S"
b0 R"
1Q"
b0 P"
1O"
b0 N"
b0 M"
b0 L"
b0 K"
b100 J"
b0 I"
b0 F"
b110010000000000000010010011 E"
b0 D"
b0 C"
0B"
b110010000000000000010010011 A"
b0 @"
b100 ?"
b0 >"
b0 ="
bx <"
b0 ;"
b0 :"
b0 9"
b0 8"
b0 7"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
01"
b0 0"
b0 /"
b0 ."
b0 -"
b0 ,"
b0 +"
b0 *"
b0 }
b0 |
b0 {
b0 z
b0 y
b0 x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
b0 i
b0 h
0g
0f
0e
b0 d
b0 c
b0 b
b0 a
0`
0_
0^
0]
0\
0[
0Z
xY
0X
0W
b0 V
0U
b0 T
b0 S
0R
b0 Q
b0 P
b0 O
b0 N
b0 M
b0 L
bx K
b0 J
xI
0H
b0 G
bx F
0E
b0 D
b0 C
b0 B
0A
b0 @
b0 ?
x>
x=
x<
x;
x:
b0 9
b0 8
b0 7
x6
b0 5
b0 4
b0 3
b0 2
01
00
b0 /
1.
bx -
b0 ,
b0 +
b0 *
0)
0(
b0 '
b0 &
0%
bx $
0#
0"
b0 !
$end
#5
b1000000000000 j"
b100000 ]"
1(
#10
0(
#15
b1000000000000 j"
b100000 ]"
1(
#20
0(
1)
#25
b10 K
b10 <"
1I
16
b1100100 @
b1100100 ="
xH
b1 7
b1 6"
b100 3
b100 4"
b100 V"
b100 Y"
b11 :"
b10011 8"
b0x000 ?"
b0x000 J"
bx d
xX
xW
xR
bx O
bx m
xZ
x_
x\
xe
b110010000000000000010010011 ?
b110010000000000000010010011 9"
b110010000000000000010010011 C"
b10100000000000100010011 A"
b10100000000000100010011 E"
b100 @"
b100 F"
b100 K"
1(
#30
0(
#35
0.
b1100100 J
b1100100 }
b1100100 +"
b1100100 *"
bx ?"
bx J"
b10 7
b10 6"
b101 3
b101 4"
b101 V"
b101 Y"
b0 :"
b101 @
b101 ="
b1100100 L
b1100100 w
b1100100 |
b1101000 G
b1101000 2"
b1101000 >"
b1101000 I"
bx A"
bx E"
b0x000 @"
b0x000 F"
b0x000 K"
b100 9
b100 0"
b100 3"
b100 8
b100 7"
b100 D"
b10100000000000100010011 ?
b10100000000000100010011 9"
b10100000000000100010011 C"
1R
b10 O
b10 m
1e
b1100100 V
b1100100 p
b1100100 -"
b1 a
b1 T"
b100 j
b100 P"
x%
x[
x"
x`
x]
xf
1(
#40
0(
#45
b101 J
b101 }
b101 +"
b101 *"
bx 2
bx ["
bx 4
bx \"
bx /
bx t
bx Z"
b1100100 a"
b101 L
b101 w
b101 |
bx G
bx 2"
bx >"
bx I"
bx 7
bx 6"
bx 3
bx 4"
bx V"
bx Y"
bx 5
bx 5"
bx U"
bx X"
xA
bx :"
bx B
bx ;"
bx 8"
b0 @
b0 ="
xB"
x^
xg
1f
b1100100 '
b1100100 *
b1100100 ^"
b1100100 P
b1100100 q
b1 b
b1 L"
b101 V
b101 p
b101 -"
b10 a
b10 T"
b101 j
b101 P"
b0x000 9
b0x000 0"
b0x000 3"
b0x000 8
b0x000 7"
b0x000 D"
bx ?
bx 9"
bx C"
bx @"
bx F"
bx K"
1(
#50
0(
#55
x.
bx J
bx }
bx +"
bx *"
b0 L
b0 w
b0 |
bx y
bx M
bx x
bx z
bx ."
b100 a"
bx 9
bx 0"
bx 3"
bx 8
bx 7"
bx D"
xU
bx S
bx n
bx ,"
b0 V
b0 p
b0 -"
bx a
bx T"
bx j
bx P"
bx h
bx N"
bx k
bx s
bx /"
bx i
bx r
b101 '
b101 *
b101 ^"
b101 P
b101 q
b10 b
b10 L"
1g
b1100100 Q
b1 c
b1 M"
b1 W"
1(
#60
0(
#65
bx00 a"
b101 Q
b10 c
b10 M"
b10 W"
bx &
bx +
bx _"
bx T
bx !
bx ,
bx `"
bx l
bx '
bx *
bx ^"
bx P
bx q
bx b
bx L"
1(
#70
0(
#75
bx Q
bx c
bx M"
bx W"
1(
#80
0(
#85
1(
#90
0(
#95
1(
#100
0(
#105
1(
#110
0(
#115
1(
#120
0(
#125
1(
#130
0(
#135
1(
#140
0(
#145
1(
#150
0(
#155
1(
#160
0(
#165
1(
#170
0(
#175
1(
#180
0(
#185
1(
#190
0(
#195
1(
#200
0(
#205
1(
#210
0(
#215
1(
#220
0(
#225
1(
#230
0(
#235
1(
#240
0(
#245
1(
#250
0(
#255
1(
#260
0(
#265
1(
#270
0(
#275
1(
#280
0(
#285
1(
#290
0(
#295
1(
#300
0(
#305
1(
#310
0(
#315
1(
#320
0(
#325
1(
#330
0(
#335
1(
#340
0(
#345
1(
#350
0(
#355
1(
#360
0(
#365
1(
#370
0(
#375
1(
#380
0(
#385
1(
#390
0(
#395
1(
#400
0(
#405
1(
#410
0(
#415
1(
#420
0(
#425
1(
#430
0(
#435
1(
#440
0(
#445
1(
#450
0(
#455
1(
#460
0(
#465
1(
#470
0(
#475
1(
#480
0(
#485
1(
#490
0(
#495
1(
#500
0(
#505
1(
#510
0(
#515
1(
#520
0(
#525
1(
#530
0(
#535
1(
#540
0(
#545
1(
#550
0(
#555
1(
#560
0(
#565
1(
#570
0(
#575
1(
#580
0(
#585
1(
#590
0(
#595
1(
#600
0(
#605
1(
#610
0(
#615
1(
#620
0(
#625
1(
#630
0(
#635
1(
#640
0(
#645
1(
#650
0(
#655
1(
#660
0(
#665
1(
#670
0(
#675
1(
#680
0(
#685
1(
#690
0(
#695
1(
#700
0(
#705
1(
#710
0(
#715
1(
#720
0(
#725
1(
#730
0(
#735
1(
#740
0(
#745
1(
#750
0(
#755
1(
#760
0(
#765
1(
#770
0(
#775
1(
#780
0(
#785
1(
#790
0(
#795
1(
#800
0(
#805
1(
#810
0(
#815
1(
#820
0(
#825
1(
#830
0(
#835
1(
#840
0(
#845
1(
#850
0(
#855
1(
#860
0(
#865
1(
#870
0(
#875
1(
#880
0(
#885
1(
#890
0(
#895
1(
#900
0(
#905
1(
#910
0(
#915
1(
#920
0(
#925
1(
#930
0(
#935
1(
#940
0(
#945
1(
#950
0(
#955
1(
#960
0(
#965
1(
#970
0(
#975
1(
#980
0(
#985
1(
#990
0(
#995
1(
#1000
0(
